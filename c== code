
#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <fstream>

class Score {
private:
    std::string country;
    int score;
    bool checked; // Flag to track if the score has been checked

public:
    Score(std::string c, int s) : country(c), score(s), checked(false) {}

    std::string getCountry() const { return country; }
    int getScore() const { return score; }
    bool isChecked() const { return checked; }
    void markChecked() { checked = true; }
};

/**
 * Read `country: score` pairs from infile and return a list of pairs
 * Stop when `infile` reaches EOF
 */
void readScores(std::istream &infile, std::vector<Score> &scores) {
    while (infile) {
        std::string country;
        int score;
        infile >> std::ws; // skip whitespace
        std::getline(infile, country, ':');
        infile >> score;
        if (!country.empty()) {
            scores.emplace_back(country, score);
        }
    }
}

/**
 * Count countries with no centuries (scores >= 100)
 */
int noCenturyCountryCount(std::vector<Score> &scores) {
    int noCenturyCount = 0;
    std::map<std::string, bool> countryChecked;

    for (const auto &score : scores) {
        const std::string &country = score.getCountry();
        
        // If we haven't checked this country yet
        if (!countryChecked[country]) {
            bool hasCentury = false;
            for (const auto &otherScore : scores) {
                if (otherScore.getCountry() == country && otherScore.getScore() >= 100) {
                    hasCentury = true;
                    break;
                }
            }
            
            // If no centuries found for this country
            if (!hasCentury) {
                noCenturyCount++;
            }

            // Mark this country as checked
            countryChecked[country] = true;
        }
    }

    return noCenturyCount;
}

int main() {
    std::vector<Score> scores;
    readScores(std::cin, scores);
    int noCenturyCount = noCenturyCountryCount(scores);
    std::cout << noCenturyCount << std::endl;

    return 0;
}
